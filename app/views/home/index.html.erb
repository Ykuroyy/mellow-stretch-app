<div class="container">
  <!-- ヘッダー -->
  <div class="header">
    <h1 class="app-title">朝ストレッチ・美呼吸</h1>
    <p class="subtitle">今日のあなたにぴったりの癒し時間</p>
  </div>

  <!-- 日付表示 -->
  <div class="date-display">
    <div class="date-text">
      <%= @today.strftime("%Y年%m月%d日") %> (<%= %w[日 月 火 水 木 金 土][@today.wday] %>)
    </div>
  </div>

  <!-- 今日のストレッチ -->
  <div class="content-card">
    <div class="card-header">
      <div class="card-icon stretch-icon">🧘‍♀️</div>
      <div>
        <h2 class="card-title">今日のストレッチ</h2>
        <div class="card-subtitle"><%= @stretch.category %></div>
      </div>
    </div>
    <div class="card-content">
      <h3><%= @stretch.name %></h3>
      <p><%= @stretch.description %></p>
      <div class="duration-badge">約<%= @stretch.duration %>分</div>
      <span class="category-badge"><%= @stretch.difficulty %></span>
      
      <!-- 実績ボタン -->
      <div class="achievement-section">
        <% if @today_achievements[:stretch] %>
          <div class="achievement-completed">
            <span class="achievement-icon">✅</span>
            <span class="achievement-text">ストレッチ完了！</span>
            <div class="achievement-buttons">
              <button class="reset-achievement-button stretch-reset-button" data-activity-type="stretch">
                <span class="button-icon">🔄</span>
                <span class="button-text">やり直す</span>
              </button>
              <button class="try-another-button stretch-try-another" data-stretch-id="<%= @stretch.id %>">
                <span class="button-icon">🔄</span>
                <span class="button-text">別のストレッチも試す</span>
              </button>
            </div>
          </div>
        <% else %>
          <div class="achievement-buttons">
            <button class="achievement-button stretch-button" data-activity-type="stretch">
              <span class="button-icon">🧘‍♀️</span>
              <span class="button-text">ストレッチしたよ</span>
            </button>
            <button class="try-another-button stretch-try-another" data-stretch-id="<%= @stretch.id %>">
              <span class="button-icon">🔄</span>
              <span class="button-text">別のストレッチも試す</span>
            </button>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <!-- 今日の呼吸法 -->
  <div class="content-card">
    <div class="card-header">
      <div class="card-icon breathing-icon">💨</div>
      <div>
        <h2 class="card-title">今日の呼吸法</h2>
        <div class="card-subtitle"><%= @breathing.benefit %></div>
      </div>
    </div>
    <div class="card-content">
      <h3><%= @breathing.name %></h3>
      <p><%= @breathing.description %></p>
      <div class="duration-badge">約<%= @breathing.duration %>分</div>
      <span class="category-badge"><%= @breathing.technique %></span>
      
      <!-- 実績ボタン -->
      <div class="achievement-section">
        <% if @today_achievements[:breathing] %>
          <div class="achievement-completed">
            <span class="achievement-icon">✅</span>
            <span class="achievement-text">呼吸法完了！</span>
            <div class="achievement-buttons">
              <button class="reset-achievement-button breathing-reset-button" data-activity-type="breathing">
                <span class="button-icon">🔄</span>
                <span class="button-text">やり直す</span>
              </button>
              <button class="try-another-button breathing-try-another" data-breathing-id="<%= @breathing.id %>">
                <span class="button-icon">🔄</span>
                <span class="button-text">別の呼吸法も試す</span>
              </button>
            </div>
          </div>
        <% else %>
          <div class="achievement-buttons">
            <button class="achievement-button breathing-button" data-activity-type="breathing">
              <span class="button-icon">💨</span>
              <span class="button-text">呼吸したよ</span>
            </button>
            <button class="try-another-button breathing-try-another" data-breathing-id="<%= @breathing.id %>">
              <span class="button-icon">🔄</span>
              <span class="button-text">別の呼吸法も試す</span>
            </button>
          </div>
        <% end %>
      </div>
    </div>
  </div>



  <!-- 過去の履歴（3日分） -->
  <% if @recent_activities.any? %>
    <div class="content-card">
      <div class="card-header">
        <div class="card-icon">📅</div>
        <div>
          <h2 class="card-title">最近の活動</h2>
          <div class="card-subtitle">過去3日分の記録</div>
        </div>
        <%= link_to activities_history_path, class: "header-link" do %>
          📅 過去10日分の詳細を見る →
        <% end %>
      </div>
      <div class="card-content">
        <% @recent_activities.group_by(&:date).first(3).each do |date, activities| %>
          <div class="history-day">
            <div class="history-date">
              <%= date.strftime("%m月%d日") %> (<%= %w[日 月 火 水 木 金 土][date.wday] %>)
            </div>
            <% activities.each do |activity| %>
              <div class="history-item">
                <div class="history-icon"><%= activity.activity_icon %></div>
                <div class="history-content">
                  <div class="history-name"><%= activity.activity_name %></div>
                  <div class="history-category"><%= activity.activity_category %></div>
                </div>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>
  <% end %>

  <!-- 1ヶ月の活動記録ボタン -->
  <div class="monthly-button-container">
    <%= link_to activities_monthly_path, class: "monthly-button" do %>
      <div class="monthly-button-content">
        <div class="monthly-button-icon">📊</div>
        <div class="monthly-button-text">
          <div class="monthly-button-title">1ヶ月の活動記録</div>
          <div class="monthly-button-subtitle">過去30日間の継続状況</div>
        </div>
        <div class="monthly-button-arrow">→</div>
      </div>
    <% end %>
  </div>

  <!-- フッター -->
  <div class="footer">
    <div class="footer-text">
      🌸 毎朝5分で、美しい習慣を始めましょう 🌸
    </div>
    <div class="footer-text">
      あなたのペースで、無理せず続けることが大切です
    </div>
    <div class="social-links">
      <a href="#" class="social-link">💕</a>
      <a href="#" class="social-link">🌸</a>
      <a href="#" class="social-link">✨</a>
    </div>
    
    <!-- 設定ボタン -->
    <div class="settings-section">
      <%= link_to settings_path, class: "settings-button" do %>
        <span class="settings-icon">⚙️</span>
        <span class="settings-text">設定</span>
      <% end %>
      
      <!-- 本番環境テスト用ボタン -->
      <button onclick="testJavaScript()" style="margin-left: 10px; padding: 8px 16px; background: #ff6b9d; color: white; border: none; border-radius: 8px; cursor: pointer;">
        🧪 JSテスト
      </button>
    </div>
  </div>
</div>

<script>
  // グローバル変数と関数の定義
  let isInitialized = false;
  
  // 初期化関数
  function initializeApp() {
    if (isInitialized) return;
    isInitialized = true;
    
    console.log('Initializing app...');
    console.log('Document ready state:', document.readyState);
    console.log('Window loaded:', window.loaded);
    
    try {
      // テーマの読み込み
      const savedTheme = localStorage.getItem('selectedTheme') || 'pink';
      applyTheme(savedTheme);
      
      // イベントリスナーの設定
      setupEventListeners();
      
      console.log('App initialization completed successfully');
    } catch (error) {
      console.error('Error during app initialization:', error);
      // 再試行
      setTimeout(() => {
        console.log('Retrying initialization...');
        isInitialized = false;
        initializeApp();
      }, 1000);
    }
  }
  
  // イベントリスナーの設定関数
  function setupEventListeners() {
    console.log('Setting up event listeners...');
    
    try {
      // 既存のイベントリスナーを削除
      document.removeEventListener('click', handleGlobalClick);
      
      // グローバルクリックイベントリスナーを追加
      document.addEventListener('click', handleGlobalClick);
      
      console.log('Global click event listener added');
    } catch (error) {
      console.error('Error setting up event listeners:', error);
    }
  }
  
  // グローバルクリックハンドラー
  function handleGlobalClick(event) {
    const target = event.target.closest('button');
    if (!target) return;
    
    console.log('Global click detected on:', target.className);
    console.log('Button text:', target.textContent.trim());
    console.log('Button data attributes:', {
      activityType: target.getAttribute('data-activity-type'),
      stretchId: target.getAttribute('data-stretch-id'),
      breathingId: target.getAttribute('data-breathing-id')
    });
    
    if (target.classList.contains('achievement-button')) {
      event.preventDefault();
      event.stopPropagation();
      console.log('Achievement button clicked via global handler');
      handleAchievementClick(target);
    } else if (target.classList.contains('reset-achievement-button')) {
      event.preventDefault();
      event.stopPropagation();
      console.log('Reset button clicked via global handler');
      handleResetAchievement(target);
    } else if (target.classList.contains('try-another-button')) {
      event.preventDefault();
      event.stopPropagation();
      console.log('Try another button clicked via global handler');
      handleTryAnother(target);
    }
  }
  
  // DOMContentLoadedイベントリスナー
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
  } else {
    initializeApp();
  }
  
  // 追加の初期化処理（本番環境用）
  window.addEventListener('load', function() {
    console.log('Window load event fired');
    setTimeout(() => {
      console.log('Delayed initialization for production...');
      setupEventListeners();
    }, 500);
  });
  
  // さらに確実な初期化（本番環境用）
  setTimeout(() => {
    console.log('Final initialization check...');
    if (typeof testJavaScript === 'undefined') {
      console.error('testJavaScript function not found, redefining...');
      // testJavaScript関数を再定義
      window.testJavaScript = function() {
        alert('JavaScript is working!');
        console.log('Test function called');
        setupEventListeners();
      };
    }
    setupEventListeners();
  }, 1000);
  
  // 本番環境での確実な初期化
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded event fired');
    console.log('Document ready state:', document.readyState);
    console.log('Window loaded:', window.loaded);
    
    // ボタンの存在確認
    const buttons = document.querySelectorAll('button');
    console.log('Total buttons found:', buttons.length);
    
    buttons.forEach((btn, index) => {
      console.log(`Button ${index}:`, {
        className: btn.className,
        textContent: btn.textContent.trim(),
        dataAttributes: {
          activityType: btn.getAttribute('data-activity-type'),
          stretchId: btn.getAttribute('data-stretch-id'),
          breathingId: btn.getAttribute('data-breathing-id')
        }
      });
    });
    
    setupEventListeners();
  });
  
  // CSRFトークン取得関数
  function getCSRFToken() {
    const token = document.querySelector('meta[name="csrf-token"]');
    return token ? token.getAttribute('content') : null;
  }
  
  // テスト用関数
  function testJavaScript() {
    alert('JavaScript is working!');
    console.log('Test function called');
    
    // ボタンの存在確認
    const achievementButtons = document.querySelectorAll('.achievement-button');
    const resetButtons = document.querySelectorAll('.reset-achievement-button');
    const tryAnotherButtons = document.querySelectorAll('.try-another-button');
    
    console.log('Achievement buttons found:', achievementButtons.length);
    console.log('Reset buttons found:', resetButtons.length);
    console.log('Try another buttons found:', tryAnotherButtons.length);
    
    // ボタンの詳細情報
    achievementButtons.forEach((btn, index) => {
      console.log(`Achievement button ${index}:`, {
        className: btn.className,
        dataActivityType: btn.getAttribute('data-activity-type'),
        textContent: btn.textContent.trim()
      });
    });
    
    // CSRFトークンの確認
    const csrfToken = getCSRFToken();
    console.log('CSRF token found:', !!csrfToken);
    console.log('CSRF token value:', csrfToken ? csrfToken.substring(0, 10) + '...' : 'null');
    
    // イベントリスナーの再設定
    setupEventListeners();
    console.log('Event listeners re-setup completed');
    
    // 手動でボタンクリックをテスト
    if (achievementButtons.length > 0) {
      console.log('Testing first achievement button click...');
      achievementButtons[0].click();
    }
  }
  
    // 実績ボタンの処理関数
  function handleAchievementClick(button) {
    console.log('handleAchievementClick called with button:', button);
    
    try {
      const activityType = button.getAttribute('data-activity-type');
      const achievementSection = button.closest('.achievement-section');
      const tryAnotherButton = achievementSection.querySelector(`.${activityType}-try-another`);
      const currentId = tryAnotherButton?.getAttribute(`data-${activityType}-id`);
      
      console.log('Activity Type:', activityType);
      console.log('Current ID:', currentId);
      console.log('Achievement Section:', achievementSection);
      console.log('Try Another Button:', tryAnotherButton);
      
      if (!activityType) {
        console.error('Activity type not found on button');
        showNotification('ボタンの設定エラーが発生しました。', 'error');
        return;
      }
      
      // CSRFトークンの取得
      const csrfToken = getCSRFToken();
      if (!csrfToken) {
        console.error('CSRF token not found');
        showNotification('セキュリティエラーが発生しました。', 'error');
        return;
      }
      
      // ボタンを無効化
      button.disabled = true;
      button.style.opacity = '0.6';
      
      console.log('Sending fetch request to /home/record_achievement');
      console.log('Request data:', {
        activity_type: activityType,
        activity_id: currentId
      });
      
      fetch('/home/record_achievement', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken,
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          activity_type: activityType,
          activity_id: currentId
        })
      })
        .then(response => {
          console.log('Response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log('Response data:', data);
          if (data.success) {
            // 成功時の処理
            const achievementSection = button.closest('.achievement-section');
            const currentTryAnotherButton = achievementSection.querySelector(`.${activityType}-try-another`);
            const currentId = currentTryAnotherButton?.getAttribute(`data-${activityType}-id`);
            
            achievementSection.innerHTML = `
              <div class="achievement-completed">
                <span class="achievement-icon">✅</span>
                <span class="achievement-text">${activityType === 'stretch' ? 'ストレッチ' : '呼吸法'}完了！</span>
                <div class="achievement-buttons">
                  <button class="reset-achievement-button ${activityType}-reset-button" data-activity-type="${activityType}">
                    <span class="button-icon">🔄</span>
                    <span class="button-text">やり直す</span>
                  </button>
                  <button class="try-another-button ${activityType}-try-another" data-${activityType}-id="${currentId}">
                    <span class="button-icon">🔄</span>
                    <span class="button-text">別の${activityType === 'stretch' ? 'ストレッチ' : '呼吸法'}も試す</span>
                  </button>
                </div>
              </div>
            `;
            
            // やり直しボタンのイベントリスナーを追加
            const resetButton = achievementSection.querySelector('.reset-achievement-button');
            resetButton.addEventListener('click', (e) => handleResetAchievement(e));
            
            // 別のストレッチ・呼吸法を試すボタンのイベントリスナーを追加
            const newTryAnotherButton = achievementSection.querySelector('.try-another-button');
            newTryAnotherButton.addEventListener('click', (e) => handleTryAnother(e));
            
            // 成功メッセージを表示
            showNotification(data.message, 'success');
            
            // 応援メッセージを表示
            setTimeout(() => {
              showEncouragementModal(data.encouragement_message, activityType);
            }, 1000);
          }
        })
        .catch(error => {
          console.error('Fetch Error:', error);
          console.error('Error details:', {
            message: error.message,
            stack: error.stack,
            activityType: activityType,
            currentId: currentId,
            url: '/home/record_achievement'
          });
          button.disabled = false;
          button.style.opacity = '1';
          showNotification('通信エラーが発生しました。もう一度お試しください。', 'error');
        });
      } catch (error) {
        console.error('JavaScript Error:', error);
        button.disabled = false;
        button.style.opacity = '1';
        showNotification('JavaScriptエラーが発生しました。', 'error');
      }
    }
    
    // CSRFトークン取得関数
    function getCSRFToken() {
      try {
        const metaTag = document.querySelector('meta[name="csrf-token"]');
        return metaTag ? metaTag.getAttribute('content') : null;
      } catch (error) {
        console.error('Error getting CSRF token:', error);
        return null;
      }
    }
    
    // やり直し機能
    function handleResetAchievement(button) {
        const activityType = button.getAttribute('data-activity-type');
        const achievementSection = button.closest('.achievement-section');
        const tryAnotherButton = achievementSection.querySelector(`.${activityType}-try-another`);
        const currentId = tryAnotherButton?.getAttribute(`data-${activityType}-id`);
        
        // ボタンを無効化
        button.disabled = true;
        button.style.opacity = '0.6';
        
              // CSRFトークンの取得
      const csrfToken = getCSRFToken();
      if (!csrfToken) {
        console.error('CSRF token not found');
        showNotification('セキュリティエラーが発生しました。', 'error');
        return;
      }
      
      fetch('/home/reset_achievement', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify({
          activity_type: activityType,
          activity_id: currentId
        })
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // 成功時の処理
            const achievementSection = button.closest('.achievement-section');
            achievementSection.innerHTML = `
              <div class="achievement-buttons">
                <button class="achievement-button ${activityType}-button" data-activity-type="${activityType}">
                  <span class="button-icon">${activityType === 'stretch' ? '🧘‍♀️' : '💨'}</span>
                  <span class="button-text">${activityType === 'stretch' ? 'ストレッチしたよ' : '呼吸したよ'}</span>
                </button>
                <button class="try-another-button ${activityType}-try-another" data-${activityType}-id="${activityType === 'stretch' ? 'current_stretch_id' : 'current_breathing_id'}">
                  <span class="button-icon">🔄</span>
                  <span class="button-text">別の${activityType === 'stretch' ? 'ストレッチ' : '呼吸法'}も試す</span>
                </button>
              </div>
            `;
            
            // 新しいボタンにイベントリスナーを追加
            const newButton = achievementSection.querySelector('.achievement-button');
            newButton.addEventListener('click', function() {
              handleAchievementClick(this);
            });
            
            const tryAnotherButton = achievementSection.querySelector('.try-another-button');
            tryAnotherButton.addEventListener('click', function() {
              handleTryAnother(this);
            });
            
            // 成功メッセージを表示
            showNotification(data.message, 'success');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          button.disabled = false;
          button.style.opacity = '1';
          showNotification('エラーが発生しました。もう一度お試しください。', 'error');
        });
      }
    }
    
    // 別のストレッチ・呼吸法を試す機能
    function handleTryAnother(button) {
        const isStretch = button.classList.contains('stretch-try-another');
        const currentId = button.getAttribute(isStretch ? 'data-stretch-id' : 'data-breathing-id');
        const endpoint = isStretch ? '/home/get_another_stretch' : '/home/get_another_breathing';
        
        // ボタンを無効化
        button.disabled = true;
        button.style.opacity = '0.6';
        
        fetch(`${endpoint}?current_id=${currentId}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // コンテンツを更新
            const card = button.closest('.content-card');
            const cardContent = card.querySelector('.card-content');
            
            if (isStretch) {
              // ストレッチの内容を更新
              const stretch = data.stretch;
              cardContent.innerHTML = `
                <h3>${stretch.name}</h3>
                <p>${stretch.description}</p>
                <div class="duration-badge">約${stretch.duration}分</div>
                <span class="category-badge">${stretch.difficulty}</span>
                
                <!-- 実績ボタン -->
                <div class="achievement-section">
                  <div class="achievement-buttons">
                    <button class="achievement-button stretch-button" data-activity-type="stretch">
                      <span class="button-icon">🧘‍♀️</span>
                      <span class="button-text">ストレッチしたよ</span>
                    </button>
                    <button class="try-another-button stretch-try-another" data-stretch-id="${stretch.id}">
                      <span class="button-icon">🔄</span>
                      <span class="button-text">別のストレッチも試す</span>
                    </button>
                  </div>
                </div>
              `;
            } else {
              // 呼吸法の内容を更新
              const breathing = data.breathing;
              cardContent.innerHTML = `
                <h3>${breathing.name}</h3>
                <p>${breathing.description}</p>
                <div class="duration-badge">約${breathing.duration}分</div>
                <span class="category-badge">${breathing.technique}</span>
                
                <!-- 実績ボタン -->
                <div class="achievement-section">
                  <div class="achievement-buttons">
                    <button class="achievement-button breathing-button" data-activity-type="breathing">
                      <span class="button-icon">💨</span>
                      <span class="button-text">呼吸したよ</span>
                    </button>
                    <button class="try-another-button breathing-try-another" data-breathing-id="${breathing.id}">
                      <span class="button-icon">🔄</span>
                      <span class="button-text">別の呼吸法も試す</span>
                    </button>
                  </div>
                </div>
              `;
            }
            
            // 新しいボタンにイベントリスナーを追加
            const newAchievementButton = cardContent.querySelector('.achievement-button');
            newAchievementButton.addEventListener('click', function() {
              handleAchievementClick(this);
            });
            
            const newTryAnotherButton = cardContent.querySelector('.try-another-button');
            newTryAnotherButton.addEventListener('click', function() {
              handleTryAnother(this);
            });
            
            // 成功メッセージを表示
            showNotification(`新しい${isStretch ? 'ストレッチ' : '呼吸法'}を表示しました！`, 'success');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          button.disabled = false;
          button.style.opacity = '1';
          showNotification('エラーが発生しました。もう一度お試しください。', 'error');
        });
      }
    }
    
    // 通知表示関数
    function showNotification(message, type) {
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      // 3秒後に削除
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
    
    // テスト用関数
    function testJavaScript() {
      alert('JavaScript is working!');
      console.log('Test function called');
      
      // ボタンの存在確認
      const achievementButtons = document.querySelectorAll('.achievement-button');
      const resetButtons = document.querySelectorAll('.reset-achievement-button');
      const tryAnotherButtons = document.querySelectorAll('.try-another-button');
      
      console.log('Achievement buttons found:', achievementButtons.length);
      console.log('Reset buttons found:', resetButtons.length);
      console.log('Try another buttons found:', tryAnotherButtons.length);
      
      // ボタンの詳細情報
      achievementButtons.forEach((btn, index) => {
        console.log(`Achievement button ${index}:`, {
          className: btn.className,
          dataActivityType: btn.getAttribute('data-activity-type'),
          textContent: btn.textContent.trim()
        });
      });
      
      // CSRFトークンの確認
      const csrfToken = getCSRFToken();
      console.log('CSRF token found:', !!csrfToken);
      console.log('CSRF token value:', csrfToken ? csrfToken.substring(0, 10) + '...' : 'null');
      
      // イベントリスナーの再設定
      setupEventListeners();
      console.log('Event listeners re-setup completed');
      
      // 手動でボタンクリックをテスト
      if (achievementButtons.length > 0) {
        console.log('Testing first achievement button click...');
        achievementButtons[0].click();
      }
    }
    
    // 応援メッセージモーダル表示関数
    function showEncouragementModal(message, activityType) {
      const modal = document.createElement('div');
      modal.className = 'encouragement-modal';
      modal.innerHTML = `
        <div class="encouragement-modal-content">
          <div class="encouragement-modal-header">
            <div class="encouragement-modal-icon">💝</div>
            <h3 class="encouragement-modal-title">今日の応援メッセージ</h3>
          </div>
          <div class="encouragement-modal-body">
            <div class="encouragement-modal-message">${message}</div>
            <div class="encouragement-modal-time">${new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}</div>
          </div>
          <div class="encouragement-modal-footer">
            <button class="encouragement-modal-button" onclick="this.closest('.encouragement-modal').remove()">
              <span class="button-icon">💕</span>
              <span class="button-text">ありがとう！</span>
            </button>
          </div>
        </div>
      `;
      
      document.body.appendChild(modal);
      
      // アニメーション効果
      setTimeout(() => {
        modal.classList.add('show');
      }, 100);
    }
    
    // テーマ適用関数
    function applyTheme(theme) {
      const root = document.documentElement;
      root.classList.remove('theme-pink', 'theme-blue', 'theme-green', 'theme-purple');
      root.classList.add(`theme-${theme}`);
      
      // カラーパレットを更新
      updateColorPalette(theme);
    }
    
    function updateColorPalette(theme) {
      const colors = {
        pink: { primary: '#FF69B4', secondary: '#FF1493', accent: '#87CEEB' },
        blue: { primary: '#4682B4', secondary: '#87CEEB', accent: '#FF69B4' },
        green: { primary: '#32CD32', secondary: '#90EE90', accent: '#FF69B4' },
        purple: { primary: '#9370DB', secondary: '#DDA0DD', accent: '#FF69B4' }
      };
      
      const color = colors[theme];
      const root = document.documentElement;
      root.style.setProperty('--primary-color', color.primary);
      root.style.setProperty('--secondary-color', color.secondary);
      root.style.setProperty('--accent-color', color.accent);
    }
  });
</script>
